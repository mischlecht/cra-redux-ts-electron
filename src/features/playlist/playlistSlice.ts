import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { v4 as uuid } from "uuid";
import { RootState } from "../../app/store";

export interface Playlist {
  id: string;
  title: string;
  videos: Video[];
}

export interface Video {
  title: string;
  url: string;
}

export interface PlaylistState {
  playlists: Playlist[];
}

const initialState: PlaylistState = {
  playlists: [],
};

export const playlistSlice = createSlice({
  name: "playlist",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addPlaylist: (state, action: PayloadAction<string>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      const id = uuid();
      const newPlaylist: Playlist = {
        id,
        title: `${action.payload}_${id}`,
        videos: [],
      };

      state.playlists.push(newPlaylist);
    },
    addVideoToPlaylist: (
      state,
      action: PayloadAction<{ video: Video; playlistIndex: number }>
    ) => {
      // Find existing playlist from index + add Video to list
      console.log("video:", action.payload.video);
    },
    deletePlaylist: (state, action: PayloadAction<{ index: number }>) => {
      state.playlists.shift();
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {},
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getPlaylists = (state: RootState): Playlist[] =>
  state.playlistStore.playlists;

export const { addPlaylist, deletePlaylist, addVideoToPlaylist } =
  playlistSlice.actions;

export default playlistSlice.reducer;
